name: Push to Docker CICD Flow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-java:
    name: Build and Test Java Application
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: productdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Wait for MySQL to Be Ready
      run: |
        echo "Waiting for MySQL to be ready..."
        sleep 20

    - name: Run Tests
      run: mvn clean test
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_DATABASE: productdb
        MYSQL_USER: root
        MYSQL_PASSWORD: root

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-java

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-assignment:product-management-api-cicd .

    - name: List Docker Images
      run: docker images

  push-docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Verify Docker Image Exists
      run: |
        docker images | grep ${{ secrets.DOCKER_USERNAME }}/docker-assignment:product-management-api-cicd || exit 1

    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/docker-assignment:product-management-api-cicd
