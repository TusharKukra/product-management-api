name: Push to Docker CICD Flow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Stage 1: Build the Java Application
  build-java:
    name: Build Java Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean install

  # Stage 2: Build the Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-java  # This ensures this job runs only after the Java build is successful

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker Layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-assignment:product-management-api-cicd .

  # Stage 3: Push the Docker Image
  push-docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build-docker  # This ensures this job runs only after the Docker build is successful

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/docker-assignment:product-management-api-cicd
